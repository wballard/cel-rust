use crate::{RelationOp, ArithmeticOp, Expression, UnaryOp, Member, Atom, parse_bytes, parse_string};
use std::str::FromStr;
use ulid::Ulid;
use rust_decimal::Decimal;

grammar;

match {
    // Skip whitespace and comments
   r"\s*" => { },
   r"//[^\n\r]*[\n\r]*" => { },
} else {
    r"[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}" => ULID,
} else {
    r"-?[0-9]+" => INT,
   _
}

pub Expression: Expression = {
    Conditional
};

pub Conditional: Expression = {
    <condition:LogicalOr> "?" <if_true:LogicalOr> ":" <if_false:Conditional> => Expression::Ternary(condition.into(), if_true.into(), if_false.into()),
    LogicalOr
};

pub LogicalOr: Expression = {
    <left:LogicalOr> "||" <right:LogicalAnd> => Expression::Or(left.into(), right.into()),
    LogicalAnd
};

pub LogicalAnd: Expression = {
    <left:LogicalAnd> "&&" <right:Relations> => Expression::And(left.into(), right.into()),
    Relations
};

pub Relations: Expression = {
    <left:ArithmeticAddSub> <op:RelationOp> <right:ArithmeticAddSub> => Expression::Relation(left.into(), op, right.into()),
    ArithmeticAddSub
};

pub ArithmeticAddSub: Expression = {
    <left:ArithmeticAddSub> <op:ArithmeticOpAddSub> <right:ArithmeticMulDivMod> => Expression::Arithmetic(left.into(), op, right.into()),
    ArithmeticMulDivMod
};

pub ArithmeticMulDivMod: Expression = {
    <left:ArithmeticMulDivMod> <op:ArithmeticOpMulDivMod> <right:Unary> => Expression::Arithmetic(left.into(), op, right.into()),
    Unary
};

pub Unary: Expression = {
    <op:UnaryOp> <right:Member> => Expression::Unary(op, right.into()),
    Member
};

pub Member: Expression = {
    <left:Member> "." <identifier:Ident> => Expression::Member(left.into(), Member::Attribute(identifier.into()).into()).into(),
    <left:Member> "." <identifier:Ident> "(" <arguments:CommaSeparated<Expression>> ")" => {
           Expression::FunctionCall(Expression::Ident(identifier).into(), Some(left.into()), arguments).into()
   },
    <left:Member> "[" <expression:Expression> "]" => Expression::Member(left.into(), Member::Index(expression.into()).into()).into(),
    <left:Member> "{" <fields:CommaSeparated<FieldInits>> "}" => Expression::Member(left.into(), Member::Fields(fields.into()).into()).into(),
    Primary,
}

pub Primary: Expression = {
    "."? <Ident> => Expression::Ident(<>.into()).into(),
    "."? <identifier:Ident> "(" <arguments:CommaSeparated<Expression>> ")" => {
           Expression::FunctionCall(Expression::Ident(identifier).into(), None, arguments).into()
    },
    Atom => Expression::Atom(<>).into(),
    "[" <members:CommaSeparated<Expression>> "]" => Expression::List(<>).into(),
    "{" <fields:CommaSeparated<MapInits>> "}" => Expression::Map(<>).into(),
    "(" <Expression> ")"
}

pub FieldInits: (String, Expression) = {
    <Ident> ":" <Expression>
}

pub MapInits: (Expression, Expression) = {
    <Expression> ":" <Expression>
}

CommaSeparated<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

ArithmeticOpAddSub: ArithmeticOp = {
    "+" => ArithmeticOp::Add,
    "-" => ArithmeticOp::Subtract
};

ArithmeticOpMulDivMod: ArithmeticOp = {
    "*" => ArithmeticOp::Multiply,
    "/" => ArithmeticOp::Divide,
    "%" => ArithmeticOp::Modulus
};


UnaryOp: UnaryOp = {
    "!" => UnaryOp::Not,
    "!!" => UnaryOp::DoubleNot,
    "-" => UnaryOp::Minus,
    "--" => UnaryOp::DoubleMinus,
}

RelationOp: RelationOp = {
    "<" => RelationOp::LessThan,
    "<=" => RelationOp::LessThanEq,
    ">" => RelationOp::GreaterThan,
    ">=" => RelationOp::GreaterThanEq,
    "==" => RelationOp::Equals,
    "!=" => RelationOp::NotEquals,
    "in" => RelationOp::In
}

Atom: Atom = {
    INT => Atom::Number(Decimal::from_str(<>).unwrap()),
    <s:r"-?0[xX][0-9a-fA-F]+"> => Atom::Number(Decimal::from_str_radix(&s.chars().filter(|&x| x != 'x' && x != 'X').collect::<String>(), 16).unwrap()),
    // Plain floats
    r"[-+]?[0-9]*\.[0-9]+" => Atom::Number(Decimal::from_str(<>).unwrap()),
    // Scientific with decimals
    r"([-+]?[0-9]*\.[0-9]+([eE][-+]?[0-9]+))" => Atom::Number(Decimal::from_scientific(<>).unwrap()),
    // Scientific with no decimals
    r"[-+]?[0-9]+[eE][-+]?[0-9]+" => Atom::Number(Decimal::from_scientific(<>).unwrap()),

    // NOTE: I've commented out some of the more complex string parsing rules
    // because they're causing "attempt to subtract with overflow" errors within
    // the LALRPOP parser.

    // Double quoted string
    // I used ChatGPT to come up with this pattern and the explanation is as follows:
    //   1. `"`: Match the opening double quote.
    //   2. `([^"\\]*(?:\\.[^"\\]*)*)`: This is the main part of the regex which matches the content inside the double quotes.
    //     a. `[^"\\]*`: Match any sequence of characters that are neither a double quote nor a backslash.
    //     b. `(?:\\.[^"\\]*)*`: This part matches an escaped character followed by any sequence of characters that are
    //        neither a double quote nor a backslash. It uses a non-capturing group (?:...) to repeat the pattern.
    //        This handles sequences like \", \\, or any other escaped character.
    //   3. `"`: Match the closing double quote.
    r#""([^"\\]*(?:\\.[^"\\]*)*)""# => Atom::String(parse_string(<>).unwrap().into()),
    r#"[rR]"([^"\\]*(?:\\.[^"\\]*)*)""# => Atom::String(parse_string(<>).unwrap().into()),

    // Single quoted string
    // Uses similar regex as above, but replace double quote with a single one
    r#"'([^'\\]*(?:\\.[^'\\]*)*)'"# => Atom::String(parse_string(<>).unwrap().into()),
    r#"[rR]'([^'\\]*(?:\\.[^'\\]*)*)'"# => Atom::String(parse_string(<>).unwrap().into()),

    // Double quoted bytes
    r#"[bB]"(\\.|[^"\n])*""# => Atom::Bytes(parse_bytes(&<>[2..<>.len()-1]).unwrap().into()),

    // Single quoted bytes
    r#"[bB]'(\\.|[^'\n])*'"# => Atom::Bytes(parse_bytes(&<>[2..<>.len()-1]).unwrap().into()),

    "true" => Atom::Bool(true),
    "false" => Atom::Bool(false),
    "null" => Atom::Null,

    // ULID in base 32
    ULID => Atom::Ulid(Ulid::from_string(<>).unwrap().into()),
};

Ident: String = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string()
}